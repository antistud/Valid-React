import type { Form, Model, SetFieldsVisibility } from './type-helpers';
import type { IExtensionDeclaration, ConfigFields, ExtensionPropsBase, ConfigValue, ExtensionType } from './base';
import type { FocusEvent as ReactFocusEvent, ChangeEvent as ReactChangeEvent } from 'react';
import type { Field } from './type-helpers/field';
export declare const FieldExtensionType: {
    readonly STRING: "STRING";
    readonly RICHTEXT: "RICHTEXT";
    readonly INT: "INT";
    readonly FLOAT: "FLOAT";
    readonly BOOLEAN: "BOOLEAN";
    readonly JSON: "JSON";
    readonly DATETIME: "DATETIME";
    readonly DATE: "DATE";
    readonly LOCATION: "LOCATION";
    readonly COLOR: "COLOR";
    readonly ENUMERATION: "ENUMERATION";
    readonly RELATION: "RELATION";
    readonly ASSET: "ASSET";
    readonly UNION: "UNION";
};
export declare const FieldExtensionFeature: {
    readonly FieldRenderer: "FieldRenderer";
    readonly ListRenderer: "ListRenderer";
    readonly TableRenderer: "TableRenderer";
};
export interface FieldExtensionDeclaration extends IExtensionDeclaration {
    extensionType: typeof ExtensionType.field;
    fieldType: keyof typeof FieldExtensionType;
    /**
     * Extension capabilities
     */
    features: (keyof typeof FieldExtensionFeature)[];
    fieldConfig?: ConfigFields;
    listConfig?: ConfigFields;
    tableConfig?: ConfigFields;
}
export interface FieldExtensionProps extends ExtensionPropsBase {
    extension: {
        config: ConfigValue;
        tableConfig: ConfigValue;
        fieldConfig: ConfigValue;
        id: string;
    };
    isExpanded: boolean;
    expand: (expand: boolean | ((isExpanded: boolean) => boolean)) => unknown;
    name: string;
    locale: string;
    entryId: string | null;
    isTableCell: boolean;
    isReadOnly: boolean | undefined;
    value: any;
    onBlur: <T extends FocusEvent | ReactFocusEvent>(event?: T) => Promise<void>;
    onChange: <T extends InputEvent | ReactChangeEvent>(event: T | any) => Promise<void>;
    onFocus: <T extends FocusEvent | ReactFocusEvent>(event?: T) => Promise<void>;
    meta: {
        active: boolean;
        error: any;
        touched: boolean;
    };
    /**
     * @deprecated use `expand` instead
     */
    expandField: (expand: boolean) => unknown;
    form: Form;
    field: Field;
    model: Model;
    /**
     * @deprecated Please use {@link Form.setFieldsVisibility}
     */
    setFieldsVisibility: SetFieldsVisibility;
    /**
     * @deprecated Please use {@link ExtensionPropsBase.extension extension.fieldConfig}
     */
    fieldConfig: ConfigValue;
    /**
     * @deprecated Please use {@link ExtensionPropsBase.extension extension.tableConfig}
     */
    tableConfig: ConfigValue;
}
