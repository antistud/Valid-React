import { useWrapperContext } from './Wrapper';
import type {
  FormSidebarExtensionProps,
  FieldExtensionProps as FieldExtensionPropsBase,
  ExtensionDeclaration,
  DeclarationRelativeProps,
} from '@graphcms/uix-sdk';

export function useFieldExtension() {
  return useWrapperContext() as FieldExtensionProps;
}

export function useFormSidebarExtension() {
  return useWrapperContext() as FormSidebarExtensionProps;
}

/**
 * @deprecated please use {@link useFieldExtension} or {@link useFormSidebarExtension}
 */
export function useUiExtension<Declaration extends ExtensionDeclaration>() {
  return useWrapperContext() as DeclarationRelativeProps<Declaration>;
}

export function useUiExtensionDialog<
  DialogReturn = any,
  DialogProps = Record<string, unknown>
>() {
  return useWrapperContext() as {
    onCloseDialog: (value?: DialogReturn | null) => void;
  } & DialogProps;
}

export interface FieldExtensionProps
  extends Omit<FieldExtensionPropsBase, 'onBlur' | 'onChange' | 'onFocus'> {
  onBlur: <T extends HTMLElement = HTMLElement>(
    event?: React.FocusEvent<T>
  ) => Promise<void>;

  onChange: <T extends HTMLElement = HTMLElement>(
    event: React.ChangeEvent<T> | any
  ) => Promise<void>;

  onFocus: <T extends HTMLElement = HTMLElement>(
    event?: React.FocusEvent<T>
  ) => Promise<void>;
}
