import type { SetFieldsVisibility } from '..';
import type {
  FormSubscription,
  FormState,
  FieldState,
  FieldSubscription,
  FormSubscriber,
} from 'final-form';

export interface AnyObject {
  [key: string]: any;
}

export interface ValidationErrors extends AnyObject {}
export interface SubmissionErrors extends AnyObject {}

export type Subscriber<V = Record<string, any>> = (value: V) => void;

export type Form = {
  change: <Value = any>(name: string, value: Value) => Promise<void>;
  getState: <Values = Record<string, any>>() => Promise<FormState<Values>>;
  getFieldState: <Value = any>(
    fieldName: string
  ) => Promise<FieldState<Value> | undefined>;
  subscribeToFieldState: <Value = any>(
    name: string,
    callback: (state: FieldState<Value>) => any,
    subscription: FieldSubscription
  ) => Promise<() => any>;
  subscribeToFormState: <Values = Record<string, any>>(
    callback: FormSubscriber<Values>,
    subscription: FormSubscription
  ) => Promise<() => any>;
  setFieldsVisibility: SetFieldsVisibility;
  changeBulk: (flatValues: Record<string, any>) => Promise<any>;
};

export {
  FormSubscription,
  FormState,
  FieldState,
  FieldSubscription,
  FormSubscriber,
} from 'final-form';
