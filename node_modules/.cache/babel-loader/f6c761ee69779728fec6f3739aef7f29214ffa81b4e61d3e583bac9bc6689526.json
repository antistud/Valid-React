{"ast":null,"code":"import React from \"react\";\nimport { ApolloClient, InMemoryCache, gql, useQuery } from \"@apollo/client\";\nconst client = new ApolloClient({\n  uri: \"https://api-us-east-1-shared-usea1-02.hygraph.com/v2/clulby30c003s07wb6t1od0lc/master\",\n  cache: new InMemoryCache()\n});\nconst GET_PRODUCTS_QUERY = gql`\n  query GetProducts {\n    items {\n      id\n      name\n      description\n    }\n  }\n`;\n\n//get posts query\nconst GET_POSTS_QUERY = gql`\n  query GetPosts {\n    posts {\n      body\n      createdAt\n      id\n      publishedAt\n      category\n      slug\n      subtitle\n      title\n      updatedAt\n      date\n      image {\n        url\n      }\n    }\n  }\n`;\n\n//get posts query where date is greater than a date\nconst GET_POSTS_BY_DATE_QUERY = gql`\n  query GetPosts($date: DateTime!) {\n    posts(where: { date_gt: $date }) {\n      body\n      createdAt\n      id\n      publishedAt\n      category\n      slug\n      subtitle\n      title\n      updatedAt\n      date\n      image {\n        url\n      }\n    }\n  }\n`;\n\n//get post by slug query\nconst GET_POST_BY_SLUG_QUERY = gql`\n  query Posts($slug: String!) {\n    post(where: { slug: $slug }) {\n      body\n      createdAt\n      publishedAt\n      slug\n      subtitle\n      category\n      title\n      date\n      image {\n        url\n      }\n    }\n  }\n`;\n\n// get pages by slug query\nconst GET_PAGE_BY_SLUG_QUERY = gql`\n  query Pages($slug: String!) {\n    page(where: { slug: $slug }) {\n      slug\n      subheader\n      title\n      header\n      page\n    }\n  }\n`;\n\n// get docs by slug query\nconst GET_DOC_BY_SLUG_QUERY = gql`\n  query Docs($slug: String!) {\n    doc(where: { slug: $slug }) {\n      body\n      slug\n      subheader\n      title\n      header\n    }\n  }\n`;\nconst DB = {\n  getPosts: async () => {\n    const {\n      data\n    } = await client.query({\n      query: GET_POSTS_BY_DATE_QUERY,\n      variables: {\n        date: new Date()\n      }\n    });\n    return data.posts;\n  },\n  getPostBySlug: async slug => {\n    const {\n      data\n    } = await client.query({\n      query: GET_POST_BY_SLUG_QUERY,\n      variables: {\n        slug\n      }\n    });\n    return data.post;\n  },\n  getPageBySlug: async slug => {\n    const {\n      data\n    } = await client.query({\n      query: GET_PAGE_BY_SLUG_QUERY,\n      variables: {\n        slug\n      }\n    });\n    return data.page;\n  },\n  getDocBySlug: async slug => {\n    const {\n      data\n    } = await client.query({\n      query: GET_DOC_BY_SLUG_QUERY,\n      variables: {\n        slug\n      }\n    });\n    return data.doc;\n  }\n};\nexport default DB;","map":{"version":3,"names":["React","ApolloClient","InMemoryCache","gql","useQuery","client","uri","cache","GET_PRODUCTS_QUERY","GET_POSTS_QUERY","GET_POSTS_BY_DATE_QUERY","GET_POST_BY_SLUG_QUERY","GET_PAGE_BY_SLUG_QUERY","GET_DOC_BY_SLUG_QUERY","DB","getPosts","data","query","variables","date","Date","posts","getPostBySlug","slug","post","getPageBySlug","page","getDocBySlug","doc"],"sources":["/Users/jonrhoades/Documents/projects/Valid-React/src/data/db.js"],"sourcesContent":["import React from \"react\";\nimport { ApolloClient, InMemoryCache, gql, useQuery } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: \"https://api-us-east-1-shared-usea1-02.hygraph.com/v2/clulby30c003s07wb6t1od0lc/master\",\n  cache: new InMemoryCache(),\n});\n\nconst GET_PRODUCTS_QUERY = gql`\n  query GetProducts {\n    items {\n      id\n      name\n      description\n    }\n  }\n`;\n\n//get posts query\nconst GET_POSTS_QUERY = gql`\n  query GetPosts {\n    posts {\n      body\n      createdAt\n      id\n      publishedAt\n      category\n      slug\n      subtitle\n      title\n      updatedAt\n      date\n      image {\n        url\n      }\n    }\n  }\n`;\n\n//get posts query where date is greater than a date\nconst GET_POSTS_BY_DATE_QUERY = gql`\n  query GetPosts($date: DateTime!) {\n    posts(where: { date_gt: $date }) {\n      body\n      createdAt\n      id\n      publishedAt\n      category\n      slug\n      subtitle\n      title\n      updatedAt\n      date\n      image {\n        url\n      }\n    }\n  }\n`;\n\n//get post by slug query\nconst GET_POST_BY_SLUG_QUERY = gql`\n  query Posts($slug: String!) {\n    post(where: { slug: $slug }) {\n      body\n      createdAt\n      publishedAt\n      slug\n      subtitle\n      category\n      title\n      date\n      image {\n        url\n      }\n    }\n  }\n`;\n\n// get pages by slug query\nconst GET_PAGE_BY_SLUG_QUERY = gql`\n  query Pages($slug: String!) {\n    page(where: { slug: $slug }) {\n      slug\n      subheader\n      title\n      header\n      page\n    }\n  }\n`;\n\n// get docs by slug query\nconst GET_DOC_BY_SLUG_QUERY = gql`\n  query Docs($slug: String!) {\n    doc(where: { slug: $slug }) {\n      body\n      slug\n      subheader\n      title\n      header\n    }\n  }\n`;\n\nconst DB = {\n  getPosts: async () => {\n    const { data } = await client.query({\n      query: GET_POSTS_BY_DATE_QUERY,\n      variables: { date: new Date() },\n    });\n    return data.posts;\n  },\n  getPostBySlug: async (slug) => {\n    const { data } = await client.query({\n      query: GET_POST_BY_SLUG_QUERY,\n      variables: { slug },\n    });\n    return data.post;\n  },\n  getPageBySlug: async (slug) => {\n    const { data } = await client.query({\n      query: GET_PAGE_BY_SLUG_QUERY,\n      variables: { slug },\n    });\n    return data.page;\n  },\n  getDocBySlug: async (slug) => {\n    const { data } = await client.query({\n      query: GET_DOC_BY_SLUG_QUERY,\n      variables: { slug },\n    });\n    return data.doc;\n  },\n};\n\nexport default DB;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,EAAEC,aAAa,EAAEC,GAAG,EAAEC,QAAQ,QAAQ,gBAAgB;AAE3E,MAAMC,MAAM,GAAG,IAAIJ,YAAY,CAAC;EAC9BK,GAAG,EAAE,uFAAuF;EAC5FC,KAAK,EAAE,IAAIL,aAAa,CAAC;AAC3B,CAAC,CAAC;AAEF,MAAMM,kBAAkB,GAAGL,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,MAAMM,eAAe,GAAGN,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,MAAMO,uBAAuB,GAAGP,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,MAAMQ,sBAAsB,GAAGR,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,MAAMS,sBAAsB,GAAGT,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,MAAMU,qBAAqB,GAAGV,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMW,EAAE,GAAG;EACTC,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpB,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMX,MAAM,CAACY,KAAK,CAAC;MAClCA,KAAK,EAAEP,uBAAuB;MAC9BQ,SAAS,EAAE;QAAEC,IAAI,EAAE,IAAIC,IAAI,CAAC;MAAE;IAChC,CAAC,CAAC;IACF,OAAOJ,IAAI,CAACK,KAAK;EACnB,CAAC;EACDC,aAAa,EAAE,MAAOC,IAAI,IAAK;IAC7B,MAAM;MAAEP;IAAK,CAAC,GAAG,MAAMX,MAAM,CAACY,KAAK,CAAC;MAClCA,KAAK,EAAEN,sBAAsB;MAC7BO,SAAS,EAAE;QAAEK;MAAK;IACpB,CAAC,CAAC;IACF,OAAOP,IAAI,CAACQ,IAAI;EAClB,CAAC;EACDC,aAAa,EAAE,MAAOF,IAAI,IAAK;IAC7B,MAAM;MAAEP;IAAK,CAAC,GAAG,MAAMX,MAAM,CAACY,KAAK,CAAC;MAClCA,KAAK,EAAEL,sBAAsB;MAC7BM,SAAS,EAAE;QAAEK;MAAK;IACpB,CAAC,CAAC;IACF,OAAOP,IAAI,CAACU,IAAI;EAClB,CAAC;EACDC,YAAY,EAAE,MAAOJ,IAAI,IAAK;IAC5B,MAAM;MAAEP;IAAK,CAAC,GAAG,MAAMX,MAAM,CAACY,KAAK,CAAC;MAClCA,KAAK,EAAEJ,qBAAqB;MAC5BK,SAAS,EAAE;QAAEK;MAAK;IACpB,CAAC,CAAC;IACF,OAAOP,IAAI,CAACY,GAAG;EACjB;AACF,CAAC;AAED,eAAed,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}